-- CREATING PRODUCTS TABLE
CREATE TABLE Products (
product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
product_name VARCHAR2(100) NOT NULL,
category VARCHAR2(50) NOT NULL,
price NUMBER(10,2) CHECK (price > 0),
stock_quantity NUMBER DEFAULT 0 CHECK (stock_quantity >= 0)
);

-- CREATING CUSTOMERS TABLE
CREATE TABLE Customers (
customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
first_name VARCHAR2(50) NOT NULL,
last_name VARCHAR2(50) NOT NULL,
email VARCHAR2(100) UNIQUE NOT NULL,
phone VARCHAR2(15)
);

-- CREATING ORDERS TABLE
CREATE TABLE Orders (
order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
customer_id NUMBER NOT NULL,
order_date DATE DEFAULT SYSDATE,
total_amount NUMBER(10,2) DEFAULT 0 CHECK (total_amount >= 0),
CONSTRAINT fk_order_customer FOREIGN KEY (customer_id)
REFERENCES Customers(customer_id)
);

-- CREATING ORDER DETAILS TABLE
CREATE TABLE OrderDetails (
order_detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
order_id NUMBER NOT NULL,
product_id NUMBER NOT NULL,
quantity NUMBER DEFAULT 1 CHECK (quantity > 0),
CONSTRAINT fk_orderdetails_order FOREIGN KEY (order_id)
REFERENCES Orders(order_id),
CONSTRAINT fk_orderdetails_product FOREIGN KEY (product_id)
REFERENCES Products(product_id)
);


-- INSERTING VALUES INTO PRODUCTS TABLE
INSERT INTO Products (product_name, category, price, stock_quantity)
VALUES ('Laptop', 'Electronics', 75000, 50);

INSERT INTO Products (product_name, category, price, stock_quantity)
VALUES ('Headphones', 'Accessories', 2500, 100);

INSERT INTO Products (product_name, category, price, stock_quantity)
VALUES ('Charger', 'Accessories', 1500, 10);

-- INSERTING VALUES INTO CUSTOMERS TABLE
INSERT INTO Customers (first_name, last_name, email, phone)
VALUES ('Aarav', 'Sharma', 'aarav.sharma@example.com', '9876543210');

INSERT INTO Customers (first_name, last_name, email, phone)
VALUES ('Sandhya', 'Reddy', 'sandhya.s@example.com', '9868787810');

INSERT INTO Customers (first_name, last_name, email, phone)
VALUES ('Vaishnavi', 'JS', 'vaishnavi.js@example.com', '9876501234');

-- INSERTING VALUES INTO ORDERS TABLE
INSERT INTO Orders (customer_id, total_amount)
VALUES (1, 77500);

INSERT INTO Orders (customer_id, total_amount)
VALUES (2, 2500);

INSERT INTO Orders (customer_id, total_amount)
VALUES (2,8080);

-- INSERTING VALUES INTO ORDER DETAILS TABLE
INSERT INTO OrderDetails (order_id, product_id, quantity)
VALUES (1, 1, 1); 

INSERT INTO OrderDetails (order_id, product_id, quantity)
VALUES (1, 3, 1); 

INSERT INTO OrderDetails (order_id, product_id, quantity)
VALUES (2, 2, 1);



-- QUERIES EXECUTION
-- 1. Retrieve products with low cost (e.g., less than 20 units)

SELECT product_name, stock_quantity
FROM Products
WHERE stock_quantity < 20;

--2. Calculate the total amount spent by each customer.

SELECT c.first_name || ' ' || c.last_name AS customer_name,
       SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.first_name, c.last_name;

--3. Update product stock quantities after orders are placed to reflect purchased items.

UPDATE Products
SET stock_quantity = stock_quantity - (
    SELECT SUM(quantity)
    FROM OrderDetails
    WHERE product_id = Products.product_id
      AND order_id = 1
)
WHERE product_id IN (
    SELECT product_id FROM OrderDetails WHERE order_id = 1
);
SELECT * FROM Products;
